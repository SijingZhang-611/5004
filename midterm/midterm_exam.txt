				 MIDTERM EXAM		   CS5004 Fall 2024 Silicon Valley Prof Mark	     Thursday, 24 October 2024, from 1:00 PM until 3:30 PM	     				 INSTRUCTIONS				       Please download the attached unfinished code files and import them intoIntelliJ. (It is OK to ask a TA for help if you have difficulty with thisstep.) Your job is not to finish all the code, nor is it to find every possiblebug. There are three questions that you should focus on. You may use yourlaptop with IntelliJ. You may search the WWW. Please do not talk during theexam except to ask an instructional team member to clarify a question.  Pleasedo not copy and paste code you have not written yourself, whether from awebsite or a generative AI tool. Searching the web is allowed only to help youremember the name of a Class or the syntax for calling a method. Turn in yourwork on time. Submission consists of committing your changes, pushing yourmidterm folder to GitHub, and submitting the URL to Canvas. Late submissionswill be penalized 1 point per minute as determined by Canvas. The projectinvolves implementing a simple “To Do” list. Quickly skim the files provided toget the overall idea.This exam has three parts:1. Implement the following unfinished code: (8 points each)    a. The compare method in UrgencyComparator.java    b. The compareTo method in ToDoItemAbs.java    c. sortByUrgency and sortByImportance in ToDoList    d. Only the indicated tests in ToDoItemSchoolTest.java    e. An equals method and hashCode method in ToDoItemSchool (ONLY)    f. Javadocs for ToDoItemAbs -- ONLY THE INDICATED ONES2. There are at least five known bugs in ToDoItemPersonal.java. (This does not   include missing/incomplete Javadocs or tests -- ignore those. IntelliJ   WARNINGS also do not count. Only report five bugs, even if you find more.    a. Find five bugs. (2 points each)       // On a separate line, describe each bug with an inline comment    b. On a separate line,       // Summarize in English how to fix the bug (2 points each)    c. If time permits, implement your fixes (3 points each)3. Answer the five questions below by briefly by editing this file. Include it   in your GitHub folder.    a. What is the benefit of an abstract class in the ToDo example? (3 points)	It allow us to share common code across related classes. 
	Abstract classes in ToDo example can help to avoid code duplication, so that it will
	help us to code in simplify. Because we don't need to write the same code again and 		again.    b. Why isn't there a toString method in the abstract class? (3 points)
	Because we have a toString() method in their parent class.    c. Why do ToDoItemsSchool and ToDoItemsPersonal invoke "super"? (3 points)
	Because super means we can use the attributes, method ,and constructor of the parent class. In ToDoItemPersonal and ToDoItemsSchool, we use the constructor of the parent class.     d. Why are the instance variables in ToDoItemAbs protected? (3 points)
	We declared the instance variables as "protected" to achieve a balance between data encapsulation and inheritance, allowing subclasses within the same inheritance hierarchy to access and modify the variables while preventing direct access from completely unrelated classes.    e. Name three key ideas of OOD with brief examples. (5 points)
	The main principles of OOPs in Java are encapsulation, inheritance, polymorphism, and abstraction. Encapsulation ensures that the internal state of an object is hidden and can only be accessed through public methods. Inheritance allows one class to inherit properties and behavior from another class. This enable reusability and establishes a hierarchical relationship between classes. For example, in ToDoItemAbs implements ToDoItem, so we can use the method of the ToDoItem class.  